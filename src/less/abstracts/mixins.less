.get-clamp(
  @min-size,
  @max-size,
  @min-breakpoint,
  @max-breakpoint,
  @unit: vw
) {
  @slope: ((@max-size - @min-size) / (@max-breakpoint - @min-breakpoint));
  @slope-to-unit: round(unit(@slope * 100), 2);
  @intercept-rem: round(@min-size - @slope * @min-breakpoint, 2);
  @min-size-rem: round(@min-size, 2);
  @max-size-rem: round(@max-size, 2);
  @result: ~"clamp(@{min-size-rem}, @{slope-to-unit}@{unit} + @{intercept-rem}, @{max-size-rem})";
}

.mq(@breakpoints, @rules) {
  & when (length(@breakpoints) = 1) {
    @media screen and (min-width: @breakpoints) {
      @rules();
    }
  }

  & when (length(@breakpoints) = 2) {
    @min: extract(@breakpoints, 1);
    @max: extract(@breakpoints, 2);

    & when (@min = 0) {
      @media screen and (max-width: @max) {
        @rules();
      }
    }

    & when not (@min = 0) {
      @media screen and (min-width: @min) and (max-width: @max) {
        @rules();
      }
    }
  }
}

.padding-inline() {
  padding-inline: .get-clamp(1.5rem, 2.5rem, 25rem, 40rem) [];
}
